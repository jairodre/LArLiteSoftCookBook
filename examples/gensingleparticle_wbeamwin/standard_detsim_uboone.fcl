#include "services_microboone.fcl"
#include "detsimmodules_microboone.fcl"
#include "triggersim_microboone.fcl"
#include "opticaldetectorsim_microboone.fcl"

process_name: Detsim

uboone_fakebnb: {
    module_type: FakeBNBGate
    GateG4time_ns: 0.0
}

services:
{
  scheduler:    { defaultExceptions: false }    # Make all uncaught exceptions fatal.
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "detsim_hist.root" }
  Timing:       {}
  SimpleMemoryCheck:     { ignoreTotal: 1 } # default is one
  RandomNumberGenerator: {} #ART native random number generator
  FileCatalogMetadata:  @local::art_file_catalog_mc
  user:         @local::microboone_detsim_services
}

#source is now a root file
source:
{
  module_type: RootInput
  maxEvents:  10        # Number of events to create
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
   fakebnb:        @local::uboone_fakebnb
   optdigitizer:   @local::microboone_optical_adc_sim
   optfem:         @local::microboone_optical_fem_sim
   triggersim:     @local::ubtrigger_standard
   pmtreadout:     @local::microboone_optical_dram_readout_sim
   daq:            @local::microboone_simwire
   rns:            { module_type: "RandomNumberSaver" }
 }
 
 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 simulate: [ rns, fakebnb, optdigitizer, optfem, triggersim, pmtreadout, daq ]
 
 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [simulate] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [stream1]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "%ifb_%tc_detsim.root"
   dataTier:    "detector-simulated"
   compressionLevel: 1
 }
}

# make optical code use the fake trigger
physics.producers.optdigitizer.BeamModName: ["fakebnb"]
physics.producers.optfem.BeamGateModule: "fakebnb"
physics.producers.triggersim.BeamModName: ["fakebnb"]
physics.producers.triggersim.DebugMode: false

# change the qe and/or dark rate
services.user.UBOpticalChConfig.QE: [ 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 
                                      0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 
                                      0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 
                                      0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 
                                      0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 
                                      0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, # channels 0-35
                                      1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                                      1.0, 1.0, 1.0, 1.0, 1.0, 1.0,       # logic channels 36-47 (dummy)
                                      0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 
                                      0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 
                                      0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 
                                      0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 
                                      0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 
                                      0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, # channels 100-135
                                      1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                                      1.0, 1.0, 1.0, 1.0, 1.0, 1.0,       # logic channels 136-147 (dummy)
                                      0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 
                                      0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 
                                      0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 
                                      0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 
                                      0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 
                                      0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, # channels 200-235
                                      0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 
                                      0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 
                                      0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 
                                      0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 
                                      0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 
                                      0.0093, 0.0093, 0.0093, 0.0093, 0.0093, 0.0093 ] # channels 300-335 
# services.user.UBOpticalChConfig.DarkRate: [ 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,
#                                             0.00, 0.00, 0.00, 0.00, 0.00, 0.00,
#                                             0.00, 0.00, 0.00, 0.00, 0.00, 0.00,
#                                             0.00, 0.00, 0.00, 0.00, 0.00, 0.00,
#                                             0.00, 0.00, 0.00, 0.00, 0.00, 0.00,
#                                             0.00, 0.00, 0.00, 0.00, 0.00, 0.00, # channels 0-35
#                                             0, 0, 0, 0, 0, 0, 
#                                             0, 0, 0, 0, 0, 0, # logic channels 36-47
#                                             0.00, 0.00, 0.00, 0.00, 0.00, 0.00,
#                                             0.00, 0.00, 0.00, 0.00, 0.00, 0.00,
#                                             0.00, 0.00, 0.00, 0.00, 0.00, 0.00,
#                                             0.00, 0.00, 0.00, 0.00, 0.00, 0.00,
#                                             0.00, 0.00, 0.00, 0.00, 0.00, 0.00,
#                                             0.00, 0.00, 0.00, 0.00, 0.00, 0.00, # channels 100-135
#                                             0, 0, 0, 0, 0, 0, 
#                                             0, 0, 0, 0, 0, 0, # logic channels 136-147
#                                             0.00, 0.00, 0.00, 0.00, 0.00, 0.00,
#                                             0.00, 0.00, 0.00, 0.00, 0.00, 0.00,
#                                             0.00, 0.00, 0.00, 0.00, 0.00, 0.00,
#                                             0.00, 0.00, 0.00, 0.00, 0.00, 0.00,
#                                             0.00, 0.00, 0.00, 0.00, 0.00, 0.00,
#                                             0.00, 0.00, 0.00, 0.00, 0.00, 0.00, # channels 200-236
#                                             0.00, 0.00, 0.00, 0.00, 0.00, 0.00,
#                                             0.00, 0.00, 0.00, 0.00, 0.00, 0.00,
#                                             0.00, 0.00, 0.00, 0.00, 0.00, 0.00,
#                                             0.00, 0.00, 0.00, 0.00, 0.00, 0.00,
#                                             0.00, 0.00, 0.00, 0.00, 0.00, 0.00,
#                                             0.00, 0.00, 0.00, 0.00, 0.00, 0.00] # 300-335
services.user.UBOpticalChConfig.DarkRate: [ 0.01, 0.01, 0.01, 0.01, 0.01, 0.01,
                                            0.01, 0.01, 0.01, 0.01, 0.01, 0.01,
                                            0.01, 0.01, 0.01, 0.01, 0.01, 0.01,
                                            0.01, 0.01, 0.01, 0.01, 0.01, 0.01,
                                            0.01, 0.01, 0.01, 0.01, 0.01, 0.01,
                                            0.01, 0.01, 0.01, 0.01, 0.01, 0.01, # channels 0-35
                                            0, 0, 0, 0, 0, 0, 
                                            0, 0, 0, 0, 0, 0, # logic channels 36-47
                                            0.01, 0.01, 0.01, 0.01, 0.01, 0.01,
                                            0.01, 0.01, 0.01, 0.01, 0.01, 0.01,
                                            0.01, 0.01, 0.01, 0.01, 0.01, 0.01,
                                            0.01, 0.01, 0.01, 0.01, 0.01, 0.01,
                                            0.01, 0.01, 0.01, 0.01, 0.01, 0.01,
                                            0.01, 0.01, 0.01, 0.01, 0.01, 0.01, # channels 100-135
                                            0, 0, 0, 0, 0, 0, 
                                            0, 0, 0, 0, 0, 0, # logic channels 136-147
                                            0.01, 0.01, 0.01, 0.01, 0.01, 0.01,
                                            0.01, 0.01, 0.01, 0.01, 0.01, 0.01,
                                            0.01, 0.01, 0.01, 0.01, 0.01, 0.01,
                                            0.01, 0.01, 0.01, 0.01, 0.01, 0.01,
                                            0.01, 0.01, 0.01, 0.01, 0.01, 0.01,
                                            0.01, 0.01, 0.01, 0.01, 0.01, 0.01, # channels 200-236
                                            0.01, 0.01, 0.01, 0.01, 0.01, 0.01,
                                            0.01, 0.01, 0.01, 0.01, 0.01, 0.01,
                                            0.01, 0.01, 0.01, 0.01, 0.01, 0.01,
                                            0.01, 0.01, 0.01, 0.01, 0.01, 0.01,
                                            0.01, 0.01, 0.01, 0.01, 0.01, 0.01,
                                            0.01, 0.01, 0.01, 0.01, 0.01, 0.01] # 300-335
